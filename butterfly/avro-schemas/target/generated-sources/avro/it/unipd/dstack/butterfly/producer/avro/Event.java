/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package it.unipd.dstack.butterfly.producer.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** Avro Schema for producer events */
@org.apache.avro.specific.AvroGenerated
public class Event extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6453391873453269997L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Event\",\"namespace\":\"it.unipd.dstack.butterfly.producer.avro\",\"doc\":\"Avro Schema for producer events\",\"fields\":[{\"name\":\"timestamp\",\"type\":\"long\",\"doc\":\"Time in which the event happened\",\"logicalType\":\"timestamp-millis\"},{\"name\":\"service\",\"type\":{\"type\":\"enum\",\"name\":\"Services\",\"doc\":\"Producer services supported by Butterfly\",\"symbols\":[\"REDMINE\",\"GITLAB\",\"SONARQUBE\"]},\"doc\":\"Third party service that originated the event\"},{\"name\":\"projectName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The name of the project associated with the current event\"},{\"name\":\"projectURL\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The URL of the project associated with the current event. Sonarqube doesn't provide this information.\"},{\"name\":\"eventId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The ID of the current event, whose representation may change based on `service` and `event_type`\"},{\"name\":\"eventType\",\"type\":{\"type\":\"enum\",\"name\":\"ServiceEventTypes\",\"doc\":\"List of events available for each supported service\",\"symbols\":[\"GITLAB_COMMIT_CREATED\",\"GITLAB_ISSUE_CREATED\",\"GITLAB_ISSUE_EDITED\",\"REDMINE_TICKET_CREATED\",\"REDMINE_TICKET_EDITED\",\"REDMINE_TICKET_PRIORITY_EDITED\",\"REDMINE_USER_ADDED\",\"SONARQUBE_PROJECT_ANALYSIS_COMPLETED\"]},\"doc\":\"Event type related to the current event\"},{\"name\":\"username\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The username of the user that originated the event. Sonarqube doesn't provide this information.\"},{\"name\":\"userEmail\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Email of the user that originated the event. Sonarqube doesn't provide this information.\"},{\"name\":\"title\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Title of the event. For instance, in Gitlab this would be the branch in which there was a new commit, or the title of an issue.\"},{\"name\":\"description\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Description of the event. For instance, in Gitlab this would be the commit message or the body of the issue.\"},{\"name\":\"tags\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},\"doc\":\"List of tags associated with the event. For instance, in Gitlab this would be the issue labels.\",\"default\":[]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Event> ENCODER =
      new BinaryMessageEncoder<Event>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Event> DECODER =
      new BinaryMessageDecoder<Event>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Event> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Event> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Event>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Event to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Event from a ByteBuffer. */
  public static Event fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Time in which the event happened */
  @Deprecated public long timestamp;
  /** Third party service that originated the event */
  @Deprecated public it.unipd.dstack.butterfly.producer.avro.Services service;
  /** The name of the project associated with the current event */
  @Deprecated public java.lang.String projectName;
  /** The URL of the project associated with the current event. Sonarqube doesn't provide this information. */
  @Deprecated public java.lang.String projectURL;
  /** The ID of the current event, whose representation may change based on `service` and `event_type` */
  @Deprecated public java.lang.String eventId;
  /** Event type related to the current event */
  @Deprecated public it.unipd.dstack.butterfly.producer.avro.ServiceEventTypes eventType;
  /** The username of the user that originated the event. Sonarqube doesn't provide this information. */
  @Deprecated public java.lang.String username;
  /** Email of the user that originated the event. Sonarqube doesn't provide this information. */
  @Deprecated public java.lang.String userEmail;
  /** Title of the event. For instance, in Gitlab this would be the branch in which there was a new commit, or the title of an issue. */
  @Deprecated public java.lang.String title;
  /** Description of the event. For instance, in Gitlab this would be the commit message or the body of the issue. */
  @Deprecated public java.lang.String description;
  /** List of tags associated with the event. For instance, in Gitlab this would be the issue labels. */
  @Deprecated public java.util.List<java.lang.String> tags;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Event() {}

  /**
   * All-args constructor.
   * @param timestamp Time in which the event happened
   * @param service Third party service that originated the event
   * @param projectName The name of the project associated with the current event
   * @param projectURL The URL of the project associated with the current event. Sonarqube doesn't provide this information.
   * @param eventId The ID of the current event, whose representation may change based on `service` and `event_type`
   * @param eventType Event type related to the current event
   * @param username The username of the user that originated the event. Sonarqube doesn't provide this information.
   * @param userEmail Email of the user that originated the event. Sonarqube doesn't provide this information.
   * @param title Title of the event. For instance, in Gitlab this would be the branch in which there was a new commit, or the title of an issue.
   * @param description Description of the event. For instance, in Gitlab this would be the commit message or the body of the issue.
   * @param tags List of tags associated with the event. For instance, in Gitlab this would be the issue labels.
   */
  public Event(java.lang.Long timestamp, it.unipd.dstack.butterfly.producer.avro.Services service, java.lang.String projectName, java.lang.String projectURL, java.lang.String eventId, it.unipd.dstack.butterfly.producer.avro.ServiceEventTypes eventType, java.lang.String username, java.lang.String userEmail, java.lang.String title, java.lang.String description, java.util.List<java.lang.String> tags) {
    this.timestamp = timestamp;
    this.service = service;
    this.projectName = projectName;
    this.projectURL = projectURL;
    this.eventId = eventId;
    this.eventType = eventType;
    this.username = username;
    this.userEmail = userEmail;
    this.title = title;
    this.description = description;
    this.tags = tags;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return timestamp;
    case 1: return service;
    case 2: return projectName;
    case 3: return projectURL;
    case 4: return eventId;
    case 5: return eventType;
    case 6: return username;
    case 7: return userEmail;
    case 8: return title;
    case 9: return description;
    case 10: return tags;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: timestamp = (java.lang.Long)value$; break;
    case 1: service = (it.unipd.dstack.butterfly.producer.avro.Services)value$; break;
    case 2: projectName = (java.lang.String)value$; break;
    case 3: projectURL = (java.lang.String)value$; break;
    case 4: eventId = (java.lang.String)value$; break;
    case 5: eventType = (it.unipd.dstack.butterfly.producer.avro.ServiceEventTypes)value$; break;
    case 6: username = (java.lang.String)value$; break;
    case 7: userEmail = (java.lang.String)value$; break;
    case 8: title = (java.lang.String)value$; break;
    case 9: description = (java.lang.String)value$; break;
    case 10: tags = (java.util.List<java.lang.String>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return Time in which the event happened
   */
  public java.lang.Long getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * Time in which the event happened
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.Long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'service' field.
   * @return Third party service that originated the event
   */
  public it.unipd.dstack.butterfly.producer.avro.Services getService() {
    return service;
  }

  /**
   * Sets the value of the 'service' field.
   * Third party service that originated the event
   * @param value the value to set.
   */
  public void setService(it.unipd.dstack.butterfly.producer.avro.Services value) {
    this.service = value;
  }

  /**
   * Gets the value of the 'projectName' field.
   * @return The name of the project associated with the current event
   */
  public java.lang.String getProjectName() {
    return projectName;
  }

  /**
   * Sets the value of the 'projectName' field.
   * The name of the project associated with the current event
   * @param value the value to set.
   */
  public void setProjectName(java.lang.String value) {
    this.projectName = value;
  }

  /**
   * Gets the value of the 'projectURL' field.
   * @return The URL of the project associated with the current event. Sonarqube doesn't provide this information.
   */
  public java.lang.String getProjectURL() {
    return projectURL;
  }

  /**
   * Sets the value of the 'projectURL' field.
   * The URL of the project associated with the current event. Sonarqube doesn't provide this information.
   * @param value the value to set.
   */
  public void setProjectURL(java.lang.String value) {
    this.projectURL = value;
  }

  /**
   * Gets the value of the 'eventId' field.
   * @return The ID of the current event, whose representation may change based on `service` and `event_type`
   */
  public java.lang.String getEventId() {
    return eventId;
  }

  /**
   * Sets the value of the 'eventId' field.
   * The ID of the current event, whose representation may change based on `service` and `event_type`
   * @param value the value to set.
   */
  public void setEventId(java.lang.String value) {
    this.eventId = value;
  }

  /**
   * Gets the value of the 'eventType' field.
   * @return Event type related to the current event
   */
  public it.unipd.dstack.butterfly.producer.avro.ServiceEventTypes getEventType() {
    return eventType;
  }

  /**
   * Sets the value of the 'eventType' field.
   * Event type related to the current event
   * @param value the value to set.
   */
  public void setEventType(it.unipd.dstack.butterfly.producer.avro.ServiceEventTypes value) {
    this.eventType = value;
  }

  /**
   * Gets the value of the 'username' field.
   * @return The username of the user that originated the event. Sonarqube doesn't provide this information.
   */
  public java.lang.String getUsername() {
    return username;
  }

  /**
   * Sets the value of the 'username' field.
   * The username of the user that originated the event. Sonarqube doesn't provide this information.
   * @param value the value to set.
   */
  public void setUsername(java.lang.String value) {
    this.username = value;
  }

  /**
   * Gets the value of the 'userEmail' field.
   * @return Email of the user that originated the event. Sonarqube doesn't provide this information.
   */
  public java.lang.String getUserEmail() {
    return userEmail;
  }

  /**
   * Sets the value of the 'userEmail' field.
   * Email of the user that originated the event. Sonarqube doesn't provide this information.
   * @param value the value to set.
   */
  public void setUserEmail(java.lang.String value) {
    this.userEmail = value;
  }

  /**
   * Gets the value of the 'title' field.
   * @return Title of the event. For instance, in Gitlab this would be the branch in which there was a new commit, or the title of an issue.
   */
  public java.lang.String getTitle() {
    return title;
  }

  /**
   * Sets the value of the 'title' field.
   * Title of the event. For instance, in Gitlab this would be the branch in which there was a new commit, or the title of an issue.
   * @param value the value to set.
   */
  public void setTitle(java.lang.String value) {
    this.title = value;
  }

  /**
   * Gets the value of the 'description' field.
   * @return Description of the event. For instance, in Gitlab this would be the commit message or the body of the issue.
   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * Sets the value of the 'description' field.
   * Description of the event. For instance, in Gitlab this would be the commit message or the body of the issue.
   * @param value the value to set.
   */
  public void setDescription(java.lang.String value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'tags' field.
   * @return List of tags associated with the event. For instance, in Gitlab this would be the issue labels.
   */
  public java.util.List<java.lang.String> getTags() {
    return tags;
  }

  /**
   * Sets the value of the 'tags' field.
   * List of tags associated with the event. For instance, in Gitlab this would be the issue labels.
   * @param value the value to set.
   */
  public void setTags(java.util.List<java.lang.String> value) {
    this.tags = value;
  }

  /**
   * Creates a new Event RecordBuilder.
   * @return A new Event RecordBuilder
   */
  public static it.unipd.dstack.butterfly.producer.avro.Event.Builder newBuilder() {
    return new it.unipd.dstack.butterfly.producer.avro.Event.Builder();
  }

  /**
   * Creates a new Event RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Event RecordBuilder
   */
  public static it.unipd.dstack.butterfly.producer.avro.Event.Builder newBuilder(it.unipd.dstack.butterfly.producer.avro.Event.Builder other) {
    return new it.unipd.dstack.butterfly.producer.avro.Event.Builder(other);
  }

  /**
   * Creates a new Event RecordBuilder by copying an existing Event instance.
   * @param other The existing instance to copy.
   * @return A new Event RecordBuilder
   */
  public static it.unipd.dstack.butterfly.producer.avro.Event.Builder newBuilder(it.unipd.dstack.butterfly.producer.avro.Event other) {
    return new it.unipd.dstack.butterfly.producer.avro.Event.Builder(other);
  }

  /**
   * RecordBuilder for Event instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Event>
    implements org.apache.avro.data.RecordBuilder<Event> {

    /** Time in which the event happened */
    private long timestamp;
    /** Third party service that originated the event */
    private it.unipd.dstack.butterfly.producer.avro.Services service;
    /** The name of the project associated with the current event */
    private java.lang.String projectName;
    /** The URL of the project associated with the current event. Sonarqube doesn't provide this information. */
    private java.lang.String projectURL;
    /** The ID of the current event, whose representation may change based on `service` and `event_type` */
    private java.lang.String eventId;
    /** Event type related to the current event */
    private it.unipd.dstack.butterfly.producer.avro.ServiceEventTypes eventType;
    /** The username of the user that originated the event. Sonarqube doesn't provide this information. */
    private java.lang.String username;
    /** Email of the user that originated the event. Sonarqube doesn't provide this information. */
    private java.lang.String userEmail;
    /** Title of the event. For instance, in Gitlab this would be the branch in which there was a new commit, or the title of an issue. */
    private java.lang.String title;
    /** Description of the event. For instance, in Gitlab this would be the commit message or the body of the issue. */
    private java.lang.String description;
    /** List of tags associated with the event. For instance, in Gitlab this would be the issue labels. */
    private java.util.List<java.lang.String> tags;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(it.unipd.dstack.butterfly.producer.avro.Event.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.service)) {
        this.service = data().deepCopy(fields()[1].schema(), other.service);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.projectName)) {
        this.projectName = data().deepCopy(fields()[2].schema(), other.projectName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.projectURL)) {
        this.projectURL = data().deepCopy(fields()[3].schema(), other.projectURL);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.eventId)) {
        this.eventId = data().deepCopy(fields()[4].schema(), other.eventId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.eventType)) {
        this.eventType = data().deepCopy(fields()[5].schema(), other.eventType);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.username)) {
        this.username = data().deepCopy(fields()[6].schema(), other.username);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.userEmail)) {
        this.userEmail = data().deepCopy(fields()[7].schema(), other.userEmail);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.title)) {
        this.title = data().deepCopy(fields()[8].schema(), other.title);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.description)) {
        this.description = data().deepCopy(fields()[9].schema(), other.description);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.tags)) {
        this.tags = data().deepCopy(fields()[10].schema(), other.tags);
        fieldSetFlags()[10] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Event instance
     * @param other The existing instance to copy.
     */
    private Builder(it.unipd.dstack.butterfly.producer.avro.Event other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.service)) {
        this.service = data().deepCopy(fields()[1].schema(), other.service);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.projectName)) {
        this.projectName = data().deepCopy(fields()[2].schema(), other.projectName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.projectURL)) {
        this.projectURL = data().deepCopy(fields()[3].schema(), other.projectURL);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.eventId)) {
        this.eventId = data().deepCopy(fields()[4].schema(), other.eventId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.eventType)) {
        this.eventType = data().deepCopy(fields()[5].schema(), other.eventType);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.username)) {
        this.username = data().deepCopy(fields()[6].schema(), other.username);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.userEmail)) {
        this.userEmail = data().deepCopy(fields()[7].schema(), other.userEmail);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.title)) {
        this.title = data().deepCopy(fields()[8].schema(), other.title);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.description)) {
        this.description = data().deepCopy(fields()[9].schema(), other.description);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.tags)) {
        this.tags = data().deepCopy(fields()[10].schema(), other.tags);
        fieldSetFlags()[10] = true;
      }
    }

    /**
      * Gets the value of the 'timestamp' field.
      * Time in which the event happened
      * @return The value.
      */
    public java.lang.Long getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * Time in which the event happened
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public it.unipd.dstack.butterfly.producer.avro.Event.Builder setTimestamp(long value) {
      validate(fields()[0], value);
      this.timestamp = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * Time in which the event happened
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * Time in which the event happened
      * @return This builder.
      */
    public it.unipd.dstack.butterfly.producer.avro.Event.Builder clearTimestamp() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'service' field.
      * Third party service that originated the event
      * @return The value.
      */
    public it.unipd.dstack.butterfly.producer.avro.Services getService() {
      return service;
    }

    /**
      * Sets the value of the 'service' field.
      * Third party service that originated the event
      * @param value The value of 'service'.
      * @return This builder.
      */
    public it.unipd.dstack.butterfly.producer.avro.Event.Builder setService(it.unipd.dstack.butterfly.producer.avro.Services value) {
      validate(fields()[1], value);
      this.service = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'service' field has been set.
      * Third party service that originated the event
      * @return True if the 'service' field has been set, false otherwise.
      */
    public boolean hasService() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'service' field.
      * Third party service that originated the event
      * @return This builder.
      */
    public it.unipd.dstack.butterfly.producer.avro.Event.Builder clearService() {
      service = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'projectName' field.
      * The name of the project associated with the current event
      * @return The value.
      */
    public java.lang.String getProjectName() {
      return projectName;
    }

    /**
      * Sets the value of the 'projectName' field.
      * The name of the project associated with the current event
      * @param value The value of 'projectName'.
      * @return This builder.
      */
    public it.unipd.dstack.butterfly.producer.avro.Event.Builder setProjectName(java.lang.String value) {
      validate(fields()[2], value);
      this.projectName = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'projectName' field has been set.
      * The name of the project associated with the current event
      * @return True if the 'projectName' field has been set, false otherwise.
      */
    public boolean hasProjectName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'projectName' field.
      * The name of the project associated with the current event
      * @return This builder.
      */
    public it.unipd.dstack.butterfly.producer.avro.Event.Builder clearProjectName() {
      projectName = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'projectURL' field.
      * The URL of the project associated with the current event. Sonarqube doesn't provide this information.
      * @return The value.
      */
    public java.lang.String getProjectURL() {
      return projectURL;
    }

    /**
      * Sets the value of the 'projectURL' field.
      * The URL of the project associated with the current event. Sonarqube doesn't provide this information.
      * @param value The value of 'projectURL'.
      * @return This builder.
      */
    public it.unipd.dstack.butterfly.producer.avro.Event.Builder setProjectURL(java.lang.String value) {
      validate(fields()[3], value);
      this.projectURL = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'projectURL' field has been set.
      * The URL of the project associated with the current event. Sonarqube doesn't provide this information.
      * @return True if the 'projectURL' field has been set, false otherwise.
      */
    public boolean hasProjectURL() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'projectURL' field.
      * The URL of the project associated with the current event. Sonarqube doesn't provide this information.
      * @return This builder.
      */
    public it.unipd.dstack.butterfly.producer.avro.Event.Builder clearProjectURL() {
      projectURL = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'eventId' field.
      * The ID of the current event, whose representation may change based on `service` and `event_type`
      * @return The value.
      */
    public java.lang.String getEventId() {
      return eventId;
    }

    /**
      * Sets the value of the 'eventId' field.
      * The ID of the current event, whose representation may change based on `service` and `event_type`
      * @param value The value of 'eventId'.
      * @return This builder.
      */
    public it.unipd.dstack.butterfly.producer.avro.Event.Builder setEventId(java.lang.String value) {
      validate(fields()[4], value);
      this.eventId = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'eventId' field has been set.
      * The ID of the current event, whose representation may change based on `service` and `event_type`
      * @return True if the 'eventId' field has been set, false otherwise.
      */
    public boolean hasEventId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'eventId' field.
      * The ID of the current event, whose representation may change based on `service` and `event_type`
      * @return This builder.
      */
    public it.unipd.dstack.butterfly.producer.avro.Event.Builder clearEventId() {
      eventId = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'eventType' field.
      * Event type related to the current event
      * @return The value.
      */
    public it.unipd.dstack.butterfly.producer.avro.ServiceEventTypes getEventType() {
      return eventType;
    }

    /**
      * Sets the value of the 'eventType' field.
      * Event type related to the current event
      * @param value The value of 'eventType'.
      * @return This builder.
      */
    public it.unipd.dstack.butterfly.producer.avro.Event.Builder setEventType(it.unipd.dstack.butterfly.producer.avro.ServiceEventTypes value) {
      validate(fields()[5], value);
      this.eventType = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'eventType' field has been set.
      * Event type related to the current event
      * @return True if the 'eventType' field has been set, false otherwise.
      */
    public boolean hasEventType() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'eventType' field.
      * Event type related to the current event
      * @return This builder.
      */
    public it.unipd.dstack.butterfly.producer.avro.Event.Builder clearEventType() {
      eventType = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'username' field.
      * The username of the user that originated the event. Sonarqube doesn't provide this information.
      * @return The value.
      */
    public java.lang.String getUsername() {
      return username;
    }

    /**
      * Sets the value of the 'username' field.
      * The username of the user that originated the event. Sonarqube doesn't provide this information.
      * @param value The value of 'username'.
      * @return This builder.
      */
    public it.unipd.dstack.butterfly.producer.avro.Event.Builder setUsername(java.lang.String value) {
      validate(fields()[6], value);
      this.username = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'username' field has been set.
      * The username of the user that originated the event. Sonarqube doesn't provide this information.
      * @return True if the 'username' field has been set, false otherwise.
      */
    public boolean hasUsername() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'username' field.
      * The username of the user that originated the event. Sonarqube doesn't provide this information.
      * @return This builder.
      */
    public it.unipd.dstack.butterfly.producer.avro.Event.Builder clearUsername() {
      username = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'userEmail' field.
      * Email of the user that originated the event. Sonarqube doesn't provide this information.
      * @return The value.
      */
    public java.lang.String getUserEmail() {
      return userEmail;
    }

    /**
      * Sets the value of the 'userEmail' field.
      * Email of the user that originated the event. Sonarqube doesn't provide this information.
      * @param value The value of 'userEmail'.
      * @return This builder.
      */
    public it.unipd.dstack.butterfly.producer.avro.Event.Builder setUserEmail(java.lang.String value) {
      validate(fields()[7], value);
      this.userEmail = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'userEmail' field has been set.
      * Email of the user that originated the event. Sonarqube doesn't provide this information.
      * @return True if the 'userEmail' field has been set, false otherwise.
      */
    public boolean hasUserEmail() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'userEmail' field.
      * Email of the user that originated the event. Sonarqube doesn't provide this information.
      * @return This builder.
      */
    public it.unipd.dstack.butterfly.producer.avro.Event.Builder clearUserEmail() {
      userEmail = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'title' field.
      * Title of the event. For instance, in Gitlab this would be the branch in which there was a new commit, or the title of an issue.
      * @return The value.
      */
    public java.lang.String getTitle() {
      return title;
    }

    /**
      * Sets the value of the 'title' field.
      * Title of the event. For instance, in Gitlab this would be the branch in which there was a new commit, or the title of an issue.
      * @param value The value of 'title'.
      * @return This builder.
      */
    public it.unipd.dstack.butterfly.producer.avro.Event.Builder setTitle(java.lang.String value) {
      validate(fields()[8], value);
      this.title = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'title' field has been set.
      * Title of the event. For instance, in Gitlab this would be the branch in which there was a new commit, or the title of an issue.
      * @return True if the 'title' field has been set, false otherwise.
      */
    public boolean hasTitle() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'title' field.
      * Title of the event. For instance, in Gitlab this would be the branch in which there was a new commit, or the title of an issue.
      * @return This builder.
      */
    public it.unipd.dstack.butterfly.producer.avro.Event.Builder clearTitle() {
      title = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'description' field.
      * Description of the event. For instance, in Gitlab this would be the commit message or the body of the issue.
      * @return The value.
      */
    public java.lang.String getDescription() {
      return description;
    }

    /**
      * Sets the value of the 'description' field.
      * Description of the event. For instance, in Gitlab this would be the commit message or the body of the issue.
      * @param value The value of 'description'.
      * @return This builder.
      */
    public it.unipd.dstack.butterfly.producer.avro.Event.Builder setDescription(java.lang.String value) {
      validate(fields()[9], value);
      this.description = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * Description of the event. For instance, in Gitlab this would be the commit message or the body of the issue.
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'description' field.
      * Description of the event. For instance, in Gitlab this would be the commit message or the body of the issue.
      * @return This builder.
      */
    public it.unipd.dstack.butterfly.producer.avro.Event.Builder clearDescription() {
      description = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'tags' field.
      * List of tags associated with the event. For instance, in Gitlab this would be the issue labels.
      * @return The value.
      */
    public java.util.List<java.lang.String> getTags() {
      return tags;
    }

    /**
      * Sets the value of the 'tags' field.
      * List of tags associated with the event. For instance, in Gitlab this would be the issue labels.
      * @param value The value of 'tags'.
      * @return This builder.
      */
    public it.unipd.dstack.butterfly.producer.avro.Event.Builder setTags(java.util.List<java.lang.String> value) {
      validate(fields()[10], value);
      this.tags = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'tags' field has been set.
      * List of tags associated with the event. For instance, in Gitlab this would be the issue labels.
      * @return True if the 'tags' field has been set, false otherwise.
      */
    public boolean hasTags() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'tags' field.
      * List of tags associated with the event. For instance, in Gitlab this would be the issue labels.
      * @return This builder.
      */
    public it.unipd.dstack.butterfly.producer.avro.Event.Builder clearTags() {
      tags = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Event build() {
      try {
        Event record = new Event();
        record.timestamp = fieldSetFlags()[0] ? this.timestamp : (java.lang.Long) defaultValue(fields()[0]);
        record.service = fieldSetFlags()[1] ? this.service : (it.unipd.dstack.butterfly.producer.avro.Services) defaultValue(fields()[1]);
        record.projectName = fieldSetFlags()[2] ? this.projectName : (java.lang.String) defaultValue(fields()[2]);
        record.projectURL = fieldSetFlags()[3] ? this.projectURL : (java.lang.String) defaultValue(fields()[3]);
        record.eventId = fieldSetFlags()[4] ? this.eventId : (java.lang.String) defaultValue(fields()[4]);
        record.eventType = fieldSetFlags()[5] ? this.eventType : (it.unipd.dstack.butterfly.producer.avro.ServiceEventTypes) defaultValue(fields()[5]);
        record.username = fieldSetFlags()[6] ? this.username : (java.lang.String) defaultValue(fields()[6]);
        record.userEmail = fieldSetFlags()[7] ? this.userEmail : (java.lang.String) defaultValue(fields()[7]);
        record.title = fieldSetFlags()[8] ? this.title : (java.lang.String) defaultValue(fields()[8]);
        record.description = fieldSetFlags()[9] ? this.description : (java.lang.String) defaultValue(fields()[9]);
        record.tags = fieldSetFlags()[10] ? this.tags : (java.util.List<java.lang.String>) defaultValue(fields()[10]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Event>
    WRITER$ = (org.apache.avro.io.DatumWriter<Event>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Event>
    READER$ = (org.apache.avro.io.DatumReader<Event>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
