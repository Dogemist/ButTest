/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package it.unipd.dstack.butterfly.consumer.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** Avro Schema which contains the user info, a single contact platform and a contact ID */
@org.apache.avro.specific.AvroGenerated
public class UserSingleContact extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5894544132093361448L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"UserSingleContact\",\"namespace\":\"it.unipd.dstack.butterfly.consumer.avro\",\"doc\":\"Avro Schema which contains the user info, a single contact platform and a contact ID\",\"fields\":[{\"name\":\"firstname\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The firstname of the user that should receive the event notification\"},{\"name\":\"lastname\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The lastname of the user that should receive the event notification\"},{\"name\":\"contact\",\"type\":{\"type\":\"enum\",\"name\":\"Contacts\",\"doc\":\"Consumer contact applications supported by Butterfly\",\"symbols\":[\"TELEGRAM\",\"SLACK\",\"EMAIL\"]},\"doc\":\"The type of contact platform where the user designed as recipient should receive this notification\"},{\"name\":\"contactRef\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The ID that identifies the user in the chosen contact platform\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<UserSingleContact> ENCODER =
      new BinaryMessageEncoder<UserSingleContact>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<UserSingleContact> DECODER =
      new BinaryMessageDecoder<UserSingleContact>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<UserSingleContact> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<UserSingleContact> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<UserSingleContact>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this UserSingleContact to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a UserSingleContact from a ByteBuffer. */
  public static UserSingleContact fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** The firstname of the user that should receive the event notification */
  @Deprecated public java.lang.String firstname;
  /** The lastname of the user that should receive the event notification */
  @Deprecated public java.lang.String lastname;
  /** The type of contact platform where the user designed as recipient should receive this notification */
  @Deprecated public it.unipd.dstack.butterfly.consumer.avro.Contacts contact;
  /** The ID that identifies the user in the chosen contact platform */
  @Deprecated public java.lang.String contactRef;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public UserSingleContact() {}

  /**
   * All-args constructor.
   * @param firstname The firstname of the user that should receive the event notification
   * @param lastname The lastname of the user that should receive the event notification
   * @param contact The type of contact platform where the user designed as recipient should receive this notification
   * @param contactRef The ID that identifies the user in the chosen contact platform
   */
  public UserSingleContact(java.lang.String firstname, java.lang.String lastname, it.unipd.dstack.butterfly.consumer.avro.Contacts contact, java.lang.String contactRef) {
    this.firstname = firstname;
    this.lastname = lastname;
    this.contact = contact;
    this.contactRef = contactRef;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return firstname;
    case 1: return lastname;
    case 2: return contact;
    case 3: return contactRef;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: firstname = (java.lang.String)value$; break;
    case 1: lastname = (java.lang.String)value$; break;
    case 2: contact = (it.unipd.dstack.butterfly.consumer.avro.Contacts)value$; break;
    case 3: contactRef = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'firstname' field.
   * @return The firstname of the user that should receive the event notification
   */
  public java.lang.String getFirstname() {
    return firstname;
  }

  /**
   * Sets the value of the 'firstname' field.
   * The firstname of the user that should receive the event notification
   * @param value the value to set.
   */
  public void setFirstname(java.lang.String value) {
    this.firstname = value;
  }

  /**
   * Gets the value of the 'lastname' field.
   * @return The lastname of the user that should receive the event notification
   */
  public java.lang.String getLastname() {
    return lastname;
  }

  /**
   * Sets the value of the 'lastname' field.
   * The lastname of the user that should receive the event notification
   * @param value the value to set.
   */
  public void setLastname(java.lang.String value) {
    this.lastname = value;
  }

  /**
   * Gets the value of the 'contact' field.
   * @return The type of contact platform where the user designed as recipient should receive this notification
   */
  public it.unipd.dstack.butterfly.consumer.avro.Contacts getContact() {
    return contact;
  }

  /**
   * Sets the value of the 'contact' field.
   * The type of contact platform where the user designed as recipient should receive this notification
   * @param value the value to set.
   */
  public void setContact(it.unipd.dstack.butterfly.consumer.avro.Contacts value) {
    this.contact = value;
  }

  /**
   * Gets the value of the 'contactRef' field.
   * @return The ID that identifies the user in the chosen contact platform
   */
  public java.lang.String getContactRef() {
    return contactRef;
  }

  /**
   * Sets the value of the 'contactRef' field.
   * The ID that identifies the user in the chosen contact platform
   * @param value the value to set.
   */
  public void setContactRef(java.lang.String value) {
    this.contactRef = value;
  }

  /**
   * Creates a new UserSingleContact RecordBuilder.
   * @return A new UserSingleContact RecordBuilder
   */
  public static it.unipd.dstack.butterfly.consumer.avro.UserSingleContact.Builder newBuilder() {
    return new it.unipd.dstack.butterfly.consumer.avro.UserSingleContact.Builder();
  }

  /**
   * Creates a new UserSingleContact RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new UserSingleContact RecordBuilder
   */
  public static it.unipd.dstack.butterfly.consumer.avro.UserSingleContact.Builder newBuilder(it.unipd.dstack.butterfly.consumer.avro.UserSingleContact.Builder other) {
    return new it.unipd.dstack.butterfly.consumer.avro.UserSingleContact.Builder(other);
  }

  /**
   * Creates a new UserSingleContact RecordBuilder by copying an existing UserSingleContact instance.
   * @param other The existing instance to copy.
   * @return A new UserSingleContact RecordBuilder
   */
  public static it.unipd.dstack.butterfly.consumer.avro.UserSingleContact.Builder newBuilder(it.unipd.dstack.butterfly.consumer.avro.UserSingleContact other) {
    return new it.unipd.dstack.butterfly.consumer.avro.UserSingleContact.Builder(other);
  }

  /**
   * RecordBuilder for UserSingleContact instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<UserSingleContact>
    implements org.apache.avro.data.RecordBuilder<UserSingleContact> {

    /** The firstname of the user that should receive the event notification */
    private java.lang.String firstname;
    /** The lastname of the user that should receive the event notification */
    private java.lang.String lastname;
    /** The type of contact platform where the user designed as recipient should receive this notification */
    private it.unipd.dstack.butterfly.consumer.avro.Contacts contact;
    /** The ID that identifies the user in the chosen contact platform */
    private java.lang.String contactRef;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(it.unipd.dstack.butterfly.consumer.avro.UserSingleContact.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.firstname)) {
        this.firstname = data().deepCopy(fields()[0].schema(), other.firstname);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.lastname)) {
        this.lastname = data().deepCopy(fields()[1].schema(), other.lastname);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.contact)) {
        this.contact = data().deepCopy(fields()[2].schema(), other.contact);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.contactRef)) {
        this.contactRef = data().deepCopy(fields()[3].schema(), other.contactRef);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing UserSingleContact instance
     * @param other The existing instance to copy.
     */
    private Builder(it.unipd.dstack.butterfly.consumer.avro.UserSingleContact other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.firstname)) {
        this.firstname = data().deepCopy(fields()[0].schema(), other.firstname);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.lastname)) {
        this.lastname = data().deepCopy(fields()[1].schema(), other.lastname);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.contact)) {
        this.contact = data().deepCopy(fields()[2].schema(), other.contact);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.contactRef)) {
        this.contactRef = data().deepCopy(fields()[3].schema(), other.contactRef);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'firstname' field.
      * The firstname of the user that should receive the event notification
      * @return The value.
      */
    public java.lang.String getFirstname() {
      return firstname;
    }

    /**
      * Sets the value of the 'firstname' field.
      * The firstname of the user that should receive the event notification
      * @param value The value of 'firstname'.
      * @return This builder.
      */
    public it.unipd.dstack.butterfly.consumer.avro.UserSingleContact.Builder setFirstname(java.lang.String value) {
      validate(fields()[0], value);
      this.firstname = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'firstname' field has been set.
      * The firstname of the user that should receive the event notification
      * @return True if the 'firstname' field has been set, false otherwise.
      */
    public boolean hasFirstname() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'firstname' field.
      * The firstname of the user that should receive the event notification
      * @return This builder.
      */
    public it.unipd.dstack.butterfly.consumer.avro.UserSingleContact.Builder clearFirstname() {
      firstname = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastname' field.
      * The lastname of the user that should receive the event notification
      * @return The value.
      */
    public java.lang.String getLastname() {
      return lastname;
    }

    /**
      * Sets the value of the 'lastname' field.
      * The lastname of the user that should receive the event notification
      * @param value The value of 'lastname'.
      * @return This builder.
      */
    public it.unipd.dstack.butterfly.consumer.avro.UserSingleContact.Builder setLastname(java.lang.String value) {
      validate(fields()[1], value);
      this.lastname = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'lastname' field has been set.
      * The lastname of the user that should receive the event notification
      * @return True if the 'lastname' field has been set, false otherwise.
      */
    public boolean hasLastname() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'lastname' field.
      * The lastname of the user that should receive the event notification
      * @return This builder.
      */
    public it.unipd.dstack.butterfly.consumer.avro.UserSingleContact.Builder clearLastname() {
      lastname = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'contact' field.
      * The type of contact platform where the user designed as recipient should receive this notification
      * @return The value.
      */
    public it.unipd.dstack.butterfly.consumer.avro.Contacts getContact() {
      return contact;
    }

    /**
      * Sets the value of the 'contact' field.
      * The type of contact platform where the user designed as recipient should receive this notification
      * @param value The value of 'contact'.
      * @return This builder.
      */
    public it.unipd.dstack.butterfly.consumer.avro.UserSingleContact.Builder setContact(it.unipd.dstack.butterfly.consumer.avro.Contacts value) {
      validate(fields()[2], value);
      this.contact = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'contact' field has been set.
      * The type of contact platform where the user designed as recipient should receive this notification
      * @return True if the 'contact' field has been set, false otherwise.
      */
    public boolean hasContact() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'contact' field.
      * The type of contact platform where the user designed as recipient should receive this notification
      * @return This builder.
      */
    public it.unipd.dstack.butterfly.consumer.avro.UserSingleContact.Builder clearContact() {
      contact = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'contactRef' field.
      * The ID that identifies the user in the chosen contact platform
      * @return The value.
      */
    public java.lang.String getContactRef() {
      return contactRef;
    }

    /**
      * Sets the value of the 'contactRef' field.
      * The ID that identifies the user in the chosen contact platform
      * @param value The value of 'contactRef'.
      * @return This builder.
      */
    public it.unipd.dstack.butterfly.consumer.avro.UserSingleContact.Builder setContactRef(java.lang.String value) {
      validate(fields()[3], value);
      this.contactRef = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'contactRef' field has been set.
      * The ID that identifies the user in the chosen contact platform
      * @return True if the 'contactRef' field has been set, false otherwise.
      */
    public boolean hasContactRef() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'contactRef' field.
      * The ID that identifies the user in the chosen contact platform
      * @return This builder.
      */
    public it.unipd.dstack.butterfly.consumer.avro.UserSingleContact.Builder clearContactRef() {
      contactRef = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public UserSingleContact build() {
      try {
        UserSingleContact record = new UserSingleContact();
        record.firstname = fieldSetFlags()[0] ? this.firstname : (java.lang.String) defaultValue(fields()[0]);
        record.lastname = fieldSetFlags()[1] ? this.lastname : (java.lang.String) defaultValue(fields()[1]);
        record.contact = fieldSetFlags()[2] ? this.contact : (it.unipd.dstack.butterfly.consumer.avro.Contacts) defaultValue(fields()[2]);
        record.contactRef = fieldSetFlags()[3] ? this.contactRef : (java.lang.String) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<UserSingleContact>
    WRITER$ = (org.apache.avro.io.DatumWriter<UserSingleContact>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<UserSingleContact>
    READER$ = (org.apache.avro.io.DatumReader<UserSingleContact>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
